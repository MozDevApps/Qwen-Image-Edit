import runpodimport jsonimport subprocessimport timeimport osimport requestsimport base64from pathlib import Pathfrom typing import Dict, Any, List
# ConfigurationCOMFYUI_URL = "http://127.0.0.1:8188"MAX_WAIT_TIME = 600 # 10 minutesPOLL_INTERVAL = 2 # seconds
def start_comfyui():    """Start ComfyUI server in background"""    print("Starting ComfyUI server...")        process = subprocess.Popen([        "python3", "main.py",        "--listen", "0.0.0.0",        "--port", "8188",        "--highvram" # Use high VRAM mode for better performance    ], stdout=subprocess.PIPE, stderr=subprocess.PIPE)        # Wait for server to be ready    max_attempts = 60    for i in range(max_attempts):        try:            response = requests.get(f"{COMFYUI_URL}/system_stats")            if response.status_code == 200:                print("✓ ComfyUI server is ready")                return True        except Exception as e:            if i % 10 == 0:                print(f"Waiting for ComfyUI... ({i}/{max_attempts})")            time.sleep(2)        print("✗ Failed to start ComfyUI server")    return False
def upload_images_to_comfyui(images: List[Dict[str, str]]) -> List[str]:    """Upload base64 encoded images to ComfyUI input folder"""    uploaded_files = []        for idx, img_data in enumerate(images):        try:            # Decode base64 image            img_bytes = base64.b64decode(img_data['data'])            filename = img_data.get('filename', f'input_image_{idx}.png')                        # Save to ComfyUI input directory            input_path = Path(f"/workspace/ComfyUI/input/{filename}")            input_path.write_bytes(img_bytes)                        uploaded_files.append(filename)            print(f"✓ Uploaded image: {filename}")                    except Exception as e:            print(f"✗ Failed to upload image {idx}: {str(e)}")        return uploaded_files
def get_image_as_base64(image_path: str) -> str:    """Convert image file to base64 string"""    try:        with open(image_path, 'rb') as img_file:            return base64.b64encode(img_file.read()).decode('utf-8')    except Exception as e:        print(f"Error encoding image: {str(e)}")        return None
def wait_for_completion(prompt_id: str) -> Dict[str, Any]:    """Wait for workflow completion and return results"""    start_time = time.time()        while time.time() - start_time < MAX_WAIT_TIME:        try:            # Check history            response = requests.get(f"{COMFYUI_URL}/history/{prompt_id}")                        if response.status_code == 200:                history = response.json()                                if prompt_id in history:                    prompt_data = history[prompt_id]                                        # Check if completed                    if prompt_data.get('status', {}).get('completed', False):                        return {                            'status': 'success',                            'prompt_id': prompt_id,                            'outputs': prompt_data.get('outputs', {}),                            'execution_time': time.time() - start_time                        }                                        # Check for errors                    status_messages = prompt_data.get('status', {}).get('messages', [])                    for msg in status_messages:                        if msg[0] == 'execution_error':                            return {                                'status': 'error',                                'error': msg[1]                            }                        time.sleep(POLL_INTERVAL)                    except Exception as e:            print(f"Error checking status: {str(e)}")            time.sleep(POLL_INTERVAL)        return {        'status': 'timeout',        'error': f'Workflow execution exceeded {MAX_WAIT_TIME} seconds'    }
def process_workflow(job: Dict[str, Any]) -> Dict[str, Any]:    """Process a ComfyUI workflow from job input"""    try:        job_input = job.get("input", {})                # Get workflow (either as dict or load from file)        workflow = job_input.get("workflow")        if not workflow:            # Try loading default Qwen workflow            with open('/workspace/ComfyUI/qwen_edit_workflow.json', 'r') as f:                workflow = json.load(f)                # Handle image inputs if provided        images = job_input.get("images", [])        if images:            uploaded_files = upload_images_to_comfyui(images)            print(f"Uploaded {len(uploaded_files)} images")                # Update workflow with custom prompt if provided        prompt = job_input.get("prompt")        if prompt and isinstance(workflow, dict):            # Find CLIPTextEncode nodes and update prompt            for node_id, node in workflow.items():                if node.get("class_type") == "CLIPTextEncode":                    node["inputs"]["text"] = prompt                # Queue the workflow        print("Queueing workflow...")        response = requests.post(            f"{COMFYUI_URL}/prompt",            json={"prompt": workflow}        )                if response.status_code != 200:            return {                "status": "error",                "error": f"Failed to queue workflow: {response.text}"            }                result = response.json()        prompt_id = result.get("prompt_id")        print(f"✓ Workflow queued with ID: {prompt_id}")                # Wait for completion        completion_result = wait_for_completion(prompt_id)                if completion_result['status'] != 'success':            return completion_result                # Process output images        output_images = []        outputs = completion_result.get('outputs', {})                for node_id, node_output in outputs.items():            if 'images' in node_output:                for img in node_output['images']:                    filename = img['filename']                    subfolder = img.get('subfolder', '')                                        # Build full path                    if subfolder:                        img_path = f"/workspace/ComfyUI/output/{subfolder}/{filename}"                    else:                        img_path = f"/workspace/ComfyUI/output/{filename}"                                        # Encode to base64                    img_base64 = get_image_as_base64(img_path)                                        if img_base64:                        output_images.append({                            'filename': filename,                            'data': img_base64                        })                return {            'status': 'success',            'prompt_id': prompt_id,            'images': output_images,            'execution_time': completion_result.get('execution_time', 0)        }            except Exception as e:        return {            'status': 'error',            'error': str(e)        }
# Initialize ComfyUI on container startprint("=" * 60)print("Initializing ComfyUI with Qwen-Image-Edit-2509")print("=" * 60)
if not start_comfyui():    print("Failed to start ComfyUI server")    exit(1)
print("\n" + "=" * 60)print("RunPod Serverless Handler Ready")print("=" * 60)
# Start RunPod serverless handlerrunpod.serverless.start({"handler": process_workflow})
